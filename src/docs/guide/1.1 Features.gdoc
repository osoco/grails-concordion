This initial version of the plugin provides the following minimal set of features 
to integrate Concordion-based tests in a Grails application:

h4. Custom test phase

The plugin adds a new custom @concordion@ phase type to the already existing in Grails: @unit@,
@integration@, @functional@ and @other@. 

A Grails phase type controls the state of the application at test time. 

In this initial version, the @concordion@ test phase is equivalent to the @functional@ one, i.e.
the application will be fully running for the Concordion tests.

h4. Custom test type

The plugin also defines a new custom @concordion@ test type that defines the group of tests to
run and the test running mechanism. 

The @concordion@ test type selects those classes with the
suffix @Test@ or @Tests@ under the @test/concordion@ directory. As running mechanism this test type
provides a custom JUnit4 runner resulting from a mixin between the @GrailsTestCaseRunner@ shipped 
with Grails and the @ConcordionRunner@ from the Concordion framework.

h4. Mechanism to configure Concordion extensions

You can declare globally the Concordion extensions to be used trough the 
Grails application's @BuildConfig.groovy@. This mechanism is valid both, for your own extensions and for
those provided by the [concordion-extensions project|http://code.google.com/p/concordion-extensions/].

In the case of concordion-extensions, the plugin provides a [ConfigurableExtensionFactory|http://github.com/osoco/grails-concordion/blob/master/src/groovy/es/osoco/grails/plugins/concordion/extensions/ConfigurableExtensionFactory.groovy] which implements
@org.concordion.api.extension.ConcordionExtensionFactory@, providing a factory mechanism that allow
to configure those extensions that require customization through a simple DSL in the @BuildConfig.groovy@.

The initial version includes configurable implementations for the @org.concordion.api.extension.LoggingTooltipExtension@ and @org.concordion.api.extension.ScreenshotExtension@ extensions.

You can read about how to configure these extensions in the [Configuration] section of this guide.

h4. Creation script

Once you have installed the plugin you will have the command 
[create-concordion-test|Creation Scripts] available in your project.

You can always write an specification from scratch or copy it from a previous one 
and modify it, but this command allows you easily create a new sample specification 
(and its companion fixture test) by running:

{code}
grails create-concordion-test <package.SpecificationName>
{code}


