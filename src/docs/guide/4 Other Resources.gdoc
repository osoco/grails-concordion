After creating the initial changelog, the typical workflow will be along the lines of:
* make domain class changes that affect the schema
* add changes to the changelog for them
* backup your database in case something goes wrong
* run @grails dbm-update@ to update your development environment (or wherever you're applying the changes)
* check the updated domain class(es) and changelog(s) into source control

{warning}
When running migration scripts on non-development databases, it's important that you backup the database before running the migration in case anything goes wrong. You could also make a copy of the database and run the script against that, and if there's a problem the real database will be unaffected.
{warning}

To create the changelog additions, you can either manually create the changes or with the [dbm-gorm-diff|Diff Scripts] script (you can also use the [dbm-diff|Diff Scripts] script but it's far less convenient and requires a 2nd temporary database).

You have a few options with @dbm-gorm-diff@:
* @dbm-gorm-diff@ will dump to the console if no filename is specified, so you can copy/paste from there
* if you include the @--add@ parameter when running the script with a filename it will register an include for the the filename in the main changelog for you

Regardless of which approach you use, be sure to inspect generated changes and adjust as necessary.

h4. Autorun on start

Since Liquibase maintains a record of changes that have been applied, you can avoid manually updating the database by taking advantage of the plugin's auto-run feature. By default this is disabled, but you can enable it by adding

{code}
grails.plugin.databasemigration.updateOnStart = true
{code}

to Config.groovy. In addition you must specify the file(s) containing changes; specify the name(s) using the @updateOnStartFileNames@ property, e.g.:

{code}
grails.plugin.databasemigration.updateOnStartFileNames = ['changelog.groovy']
{code}

Since changelogs can contain changelogs you'll most often just specify the root changelog, changelog.groovy by convention. Any changes that haven't been executed (in the specified file(s) or files included by them) will be run in the order specified.

